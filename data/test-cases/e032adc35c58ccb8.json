{"uid":"e032adc35c58ccb8","name":"test_select_product_quantity","fullName":"tests.test_mini_bag.TestMiniBag#test_select_product_quantity","historyId":"b1e1a6eebf48ded89711c9a002d20a7e","time":{"start":1739718403428,"stop":1739718403428,"duration":0},"description":"Can change a product quantity","descriptionHtml":"<p>Can change a product quantity</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"onetrust-close-btn-handler onetrust-close-btn-ui banner-close-button ot-close-icon\" aria-label=\"Close\"></button> is not clickable at point (22, 22). Other element would receive the click: <div class=\"secondary-links_links__ejXxG\">...</div>\n  (Session info: chrome=132.0.6834.159)\nStacktrace:\n#0 0x555cd239a53a <unknown>\n#1 0x555cd1e95f00 <unknown>\n#2 0x555cd1eec8de <unknown>\n#3 0x555cd1eea813 <unknown>\n#4 0x555cd1ee7f22 <unknown>\n#5 0x555cd1ee7135 <unknown>\n#6 0x555cd1eda1cd <unknown>\n#7 0x555cd1f0a5a2 <unknown>\n#8 0x555cd1ed9758 <unknown>\n#9 0x555cd1f0a76e <unknown>\n#10 0x555cd1f28f84 <unknown>\n#11 0x555cd1f0a343 <unknown>\n#12 0x555cd1ed778a <unknown>\n#13 0x555cd1ed89de <unknown>\n#14 0x555cd23642cb <unknown>\n#15 0x555cd2368242 <unknown>\n#16 0x555cd23517ac <unknown>\n#17 0x555cd2368df7 <unknown>\n#18 0x555cd2335b2f <unknown>\n#19 0x555cd23891a8 <unknown>\n#20 0x555cd2389370 <unknown>\n#21 0x555cd23993b6 <unknown>\n#22 0x7f300469aa94 <unknown>\n#23 0x7f3004727a34 __clone","statusTrace":"driver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"3244dcbd0596542d26586578c917e712\")>\n\n    @pytest.fixture(scope='class')\n    def add_product_to_bag(driver):\n        page = ProductPage(driver, URL.PDP)\n>       page.open_page()\n\nconftest.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:23: in open_page\n    self.close_cookies_banner()\npages/base_page.py:95: in close_cookies_banner\n    self.find_element(BaseLocators.CLOSE_COOKIES_BTN).click()\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:570: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efdea215010>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...unknown>\\\\n#21 0x555cd23993b6 \\\\u003Cunknown>\\\\n#22 0x7f300469aa94 \\\\u003Cunknown>\\\\n#23 0x7f3004727a34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"onetrust-close-btn-handler onetrust-close-btn-ui banner-close-button ot-close-icon\" aria-label=\"Close\"></button> is not clickable at point (22, 22). Other element would receive the click: <div class=\"secondary-links_links__ejXxG\">...</div>\nE         (Session info: chrome=132.0.6834.159)\nE       Stacktrace:\nE       #0 0x555cd239a53a <unknown>\nE       #1 0x555cd1e95f00 <unknown>\nE       #2 0x555cd1eec8de <unknown>\nE       #3 0x555cd1eea813 <unknown>\nE       #4 0x555cd1ee7f22 <unknown>\nE       #5 0x555cd1ee7135 <unknown>\nE       #6 0x555cd1eda1cd <unknown>\nE       #7 0x555cd1f0a5a2 <unknown>\nE       #8 0x555cd1ed9758 <unknown>\nE       #9 0x555cd1f0a76e <unknown>\nE       #10 0x555cd1f28f84 <unknown>\nE       #11 0x555cd1f0a343 <unknown>\nE       #12 0x555cd1ed778a <unknown>\nE       #13 0x555cd1ed89de <unknown>\nE       #14 0x555cd23642cb <unknown>\nE       #15 0x555cd2368242 <unknown>\nE       #16 0x555cd23517ac <unknown>\nE       #17 0x555cd2368df7 <unknown>\nE       #18 0x555cd2335b2f <unknown>\nE       #19 0x555cd23891a8 <unknown>\nE       #20 0x555cd2389370 <unknown>\nE       #21 0x555cd23993b6 <unknown>\nE       #22 0x7f300469aa94 <unknown>\nE       #23 0x7f3004727a34 __clone\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1739718403428,"stop":1739718403487,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false,"hasContent":false},{"name":"driver","time":{"start":1739718403487,"stop":1739718404079,"duration":592},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false,"hasContent":false},{"name":"add_product_to_bag","time":{"start":1739718404079,"stop":1739718408842,"duration":4763},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"onetrust-close-btn-handler onetrust-close-btn-ui banner-close-button ot-close-icon\" aria-label=\"Close\"></button> is not clickable at point (22, 22). Other element would receive the click: <div class=\"secondary-links_links__ejXxG\">...</div>\n  (Session info: chrome=132.0.6834.159)\nStacktrace:\n#0 0x555cd239a53a <unknown>\n#1 0x555cd1e95f00 <unknown>\n#2 0x555cd1eec8de <unknown>\n#3 0x555cd1eea813 <unknown>\n#4 0x555cd1ee7f22 <unknown>\n#5 0x555cd1ee7135 <unknown>\n#6 0x555cd1eda1cd <unknown>\n#7 0x555cd1f0a5a2 <unknown>\n#8 0x555cd1ed9758 <unknown>\n#9 0x555cd1f0a76e <unknown>\n#10 0x555cd1f28f84 <unknown>\n#11 0x555cd1f0a343 <unknown>\n#12 0x555cd1ed778a <unknown>\n#13 0x555cd1ed89de <unknown>\n#14 0x555cd23642cb <unknown>\n#15 0x555cd2368242 <unknown>\n#16 0x555cd23517ac <unknown>\n#17 0x555cd2368df7 <unknown>\n#18 0x555cd2335b2f <unknown>\n#19 0x555cd23891a8 <unknown>\n#20 0x555cd2389370 <unknown>\n#21 0x555cd23993b6 <unknown>\n#22 0x7f300469aa94 <unknown>\n#23 0x7f3004727a34 __clone\n\n","statusTrace":"  File \"/usr/local/lib/python3.12/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/fixtures.py\", line 898, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/test_project/conftest.py\", line 66, in add_product_to_bag\n    page.open_page()\n  File \"/test_project/pages/base_page.py\", line 23, in open_page\n    self.close_cookies_banner()\n  File \"/usr/local/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/test_project/pages/base_page.py\", line 95, in close_cookies_banner\n    self.find_element(BaseLocators.CLOSE_COOKIES_BTN).click()\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 119, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 570, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Open https://uk.gymshark.com/products/gymshark-lift-contour-seamless-leggings-black-black-marl-aw23 page","time":{"start":1739718404079,"stop":1739718408841,"duration":4762},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"onetrust-close-btn-handler onetrust-close-btn-ui banner-close-button ot-close-icon\" aria-label=\"Close\"></button> is not clickable at point (22, 22). Other element would receive the click: <div class=\"secondary-links_links__ejXxG\">...</div>\n  (Session info: chrome=132.0.6834.159)\nStacktrace:\n#0 0x555cd239a53a <unknown>\n#1 0x555cd1e95f00 <unknown>\n#2 0x555cd1eec8de <unknown>\n#3 0x555cd1eea813 <unknown>\n#4 0x555cd1ee7f22 <unknown>\n#5 0x555cd1ee7135 <unknown>\n#6 0x555cd1eda1cd <unknown>\n#7 0x555cd1f0a5a2 <unknown>\n#8 0x555cd1ed9758 <unknown>\n#9 0x555cd1f0a76e <unknown>\n#10 0x555cd1f28f84 <unknown>\n#11 0x555cd1f0a343 <unknown>\n#12 0x555cd1ed778a <unknown>\n#13 0x555cd1ed89de <unknown>\n#14 0x555cd23642cb <unknown>\n#15 0x555cd2368242 <unknown>\n#16 0x555cd23517ac <unknown>\n#17 0x555cd2368df7 <unknown>\n#18 0x555cd2335b2f <unknown>\n#19 0x555cd23891a8 <unknown>\n#20 0x555cd2389370 <unknown>\n#21 0x555cd23993b6 <unknown>\n#22 0x7f300469aa94 <unknown>\n#23 0x7f3004727a34 __clone\n\n","statusTrace":"  File \"/test_project/pages/base_page.py\", line 23, in open_page\n    self.close_cookies_banner()\n  File \"/usr/local/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/test_project/pages/base_page.py\", line 95, in close_cookies_banner\n    self.find_element(BaseLocators.CLOSE_COOKIES_BTN).click()\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 119, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 570, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Close the Cookies banner","time":{"start":1739718407672,"stop":1739718408840,"duration":1168},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"onetrust-close-btn-handler onetrust-close-btn-ui banner-close-button ot-close-icon\" aria-label=\"Close\"></button> is not clickable at point (22, 22). Other element would receive the click: <div class=\"secondary-links_links__ejXxG\">...</div>\n  (Session info: chrome=132.0.6834.159)\nStacktrace:\n#0 0x555cd239a53a <unknown>\n#1 0x555cd1e95f00 <unknown>\n#2 0x555cd1eec8de <unknown>\n#3 0x555cd1eea813 <unknown>\n#4 0x555cd1ee7f22 <unknown>\n#5 0x555cd1ee7135 <unknown>\n#6 0x555cd1eda1cd <unknown>\n#7 0x555cd1f0a5a2 <unknown>\n#8 0x555cd1ed9758 <unknown>\n#9 0x555cd1f0a76e <unknown>\n#10 0x555cd1f28f84 <unknown>\n#11 0x555cd1f0a343 <unknown>\n#12 0x555cd1ed778a <unknown>\n#13 0x555cd1ed89de <unknown>\n#14 0x555cd23642cb <unknown>\n#15 0x555cd2368242 <unknown>\n#16 0x555cd23517ac <unknown>\n#17 0x555cd2368df7 <unknown>\n#18 0x555cd2335b2f <unknown>\n#19 0x555cd23891a8 <unknown>\n#20 0x555cd2389370 <unknown>\n#21 0x555cd23993b6 <unknown>\n#22 0x7f300469aa94 <unknown>\n#23 0x7f3004727a34 __clone\n\n","statusTrace":"  File \"/usr/local/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/test_project/pages/base_page.py\", line 95, in close_cookies_banner\n    self.find_element(BaseLocators.CLOSE_COOKIES_BTN).click()\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 119, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 570, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"attachmentStep":false,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"attachmentStep":false,"hasContent":true},{"name":"add_product_to_bag","time":{"start":1739718408908,"stop":1739718413188,"duration":4280},"status":"passed","steps":[{"name":"Open https://uk.gymshark.com/products/gymshark-lift-contour-seamless-leggings-black-black-marl-aw23 page","time":{"start":1739718408908,"stop":1739718412731,"duration":3823},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Select a random size","time":{"start":1739718412731,"stop":1739718412846,"duration":115},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Click Add To Bag button","time":{"start":1739718412847,"stop":1739718412954,"duration":107},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false,"hasContent":false},{"name":"Click the Bag icon in the header","time":{"start":1739718412954,"stop":1739718413188,"duration":234},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"attachmentStep":false,"hasContent":true}],"testStage":{"description":"Can change a product quantity","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"onetrust-close-btn-handler onetrust-close-btn-ui banner-close-button ot-close-icon\" aria-label=\"Close\"></button> is not clickable at point (22, 22). Other element would receive the click: <div class=\"secondary-links_links__ejXxG\">...</div>\n  (Session info: chrome=132.0.6834.159)\nStacktrace:\n#0 0x555cd239a53a <unknown>\n#1 0x555cd1e95f00 <unknown>\n#2 0x555cd1eec8de <unknown>\n#3 0x555cd1eea813 <unknown>\n#4 0x555cd1ee7f22 <unknown>\n#5 0x555cd1ee7135 <unknown>\n#6 0x555cd1eda1cd <unknown>\n#7 0x555cd1f0a5a2 <unknown>\n#8 0x555cd1ed9758 <unknown>\n#9 0x555cd1f0a76e <unknown>\n#10 0x555cd1f28f84 <unknown>\n#11 0x555cd1f0a343 <unknown>\n#12 0x555cd1ed778a <unknown>\n#13 0x555cd1ed89de <unknown>\n#14 0x555cd23642cb <unknown>\n#15 0x555cd2368242 <unknown>\n#16 0x555cd23517ac <unknown>\n#17 0x555cd2368df7 <unknown>\n#18 0x555cd2335b2f <unknown>\n#19 0x555cd23891a8 <unknown>\n#20 0x555cd2389370 <unknown>\n#21 0x555cd23993b6 <unknown>\n#22 0x7f300469aa94 <unknown>\n#23 0x7f3004727a34 __clone","statusTrace":"driver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"3244dcbd0596542d26586578c917e712\")>\n\n    @pytest.fixture(scope='class')\n    def add_product_to_bag(driver):\n        page = ProductPage(driver, URL.PDP)\n>       page.open_page()\n\nconftest.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:23: in open_page\n    self.close_cookies_banner()\npages/base_page.py:95: in close_cookies_banner\n    self.find_element(BaseLocators.CLOSE_COOKIES_BTN).click()\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:570: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efdea215010>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...unknown>\\\\n#21 0x555cd23993b6 \\\\u003Cunknown>\\\\n#22 0x7f300469aa94 \\\\u003Cunknown>\\\\n#23 0x7f3004727a34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"onetrust-close-btn-handler onetrust-close-btn-ui banner-close-button ot-close-icon\" aria-label=\"Close\"></button> is not clickable at point (22, 22). Other element would receive the click: <div class=\"secondary-links_links__ejXxG\">...</div>\nE         (Session info: chrome=132.0.6834.159)\nE       Stacktrace:\nE       #0 0x555cd239a53a <unknown>\nE       #1 0x555cd1e95f00 <unknown>\nE       #2 0x555cd1eec8de <unknown>\nE       #3 0x555cd1eea813 <unknown>\nE       #4 0x555cd1ee7f22 <unknown>\nE       #5 0x555cd1ee7135 <unknown>\nE       #6 0x555cd1eda1cd <unknown>\nE       #7 0x555cd1f0a5a2 <unknown>\nE       #8 0x555cd1ed9758 <unknown>\nE       #9 0x555cd1f0a76e <unknown>\nE       #10 0x555cd1f28f84 <unknown>\nE       #11 0x555cd1f0a343 <unknown>\nE       #12 0x555cd1ed778a <unknown>\nE       #13 0x555cd1ed89de <unknown>\nE       #14 0x555cd23642cb <unknown>\nE       #15 0x555cd2368242 <unknown>\nE       #16 0x555cd23517ac <unknown>\nE       #17 0x555cd2368df7 <unknown>\nE       #18 0x555cd2335b2f <unknown>\nE       #19 0x555cd23891a8 <unknown>\nE       #20 0x555cd2389370 <unknown>\nE       #21 0x555cd23993b6 <unknown>\nE       #22 0x7f300469aa94 <unknown>\nE       #23 0x7f3004727a34 __clone\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"38eb4d0ee8da5b58","name":"stdout","source":"38eb4d0ee8da5b58.txt","type":"text/plain","size":31}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1739718428197,"stop":1739718428303,"duration":106},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"epic","value":"Mini bag"},{"name":"tag","value":"docker"},{"name":"tag","value":"@pytest.mark.usefixtures('add_product_to_bag')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_mini_bag"},{"name":"subSuite","value":"TestMiniBag"},{"name":"host","value":"681473e4cfaa"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_mini_bag"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('add_product_to_bag')","docker"]},"source":"e032adc35c58ccb8.json","parameterValues":[]}